// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file myproto.proto

import Foundation
import ProtocolBuffers


public struct Myproto { }

public func == (lhs: Myproto.CreateRoomTos, rhs: Myproto.CreateRoomTos) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRoomName == rhs.hasRoomName) && (!lhs.hasRoomName || lhs.roomName == rhs.roomName)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.CreateRoomToc, rhs: Myproto.CreateRoomToc) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRoomId == rhs.hasRoomId) && (!lhs.hasRoomId || lhs.roomId == rhs.roomId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.JoinRoomTos, rhs: Myproto.JoinRoomTos) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasErrCode == rhs.hasErrCode) && (!lhs.hasErrCode || lhs.errCode == rhs.errCode)
  fieldCheck = fieldCheck && (lhs.hasRoomId == rhs.hasRoomId) && (!lhs.hasRoomId || lhs.roomId == rhs.roomId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.JoinRoomToc, rhs: Myproto.JoinRoomToc) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasErrCode == rhs.hasErrCode) && (!lhs.hasErrCode || lhs.errCode == rhs.errCode)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.LeaveRoomTos, rhs: Myproto.LeaveRoomTos) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.LeaveRoomToc, rhs: Myproto.LeaveRoomToc) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasErrCode == rhs.hasErrCode) && (!lhs.hasErrCode || lhs.errCode == rhs.errCode)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.LiveTos, rhs: Myproto.LiveTos) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.LiveToc, rhs: Myproto.LiveToc) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasErrCode == rhs.hasErrCode) && (!lhs.hasErrCode || lhs.errCode == rhs.errCode)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.GetRoomsTos, rhs: Myproto.GetRoomsTos) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.Room, rhs: Myproto.Room) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRoomId == rhs.hasRoomId) && (!lhs.hasRoomId || lhs.roomId == rhs.roomId)
  fieldCheck = fieldCheck && (lhs.hasRoomName == rhs.hasRoomName) && (!lhs.hasRoomName || lhs.roomName == rhs.roomName)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Myproto.GetRoomToc, rhs: Myproto.GetRoomToc) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.room == rhs.room)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Myproto {
  public struct MyprotoRoot {
    public static var sharedInstance : MyprotoRoot {
     struct Static {
         static let instance : MyprotoRoot = MyprotoRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  //<1000>
  final public class CreateRoomTos : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var roomName:String = ""

    public private(set) var hasRoomName:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasRoomName {
        try output.writeString(1, value:roomName)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasRoomName {
        serialize_size += roomName.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.CreateRoomTos> {
      var mergedArray = Array<Myproto.CreateRoomTos>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.CreateRoomTos? {
      return try Myproto.CreateRoomTos.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.CreateRoomTos {
      return try Myproto.CreateRoomTos.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.CreateRoomTos {
      return try Myproto.CreateRoomTos.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.CreateRoomTos {
      return try Myproto.CreateRoomTos.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.CreateRoomTos {
      return try Myproto.CreateRoomTos.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.CreateRoomTos {
      return try Myproto.CreateRoomTos.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.CreateRoomTos {
      return try Myproto.CreateRoomTos.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.CreateRoomTos.Builder {
      return Myproto.CreateRoomTos.classBuilder() as! Myproto.CreateRoomTos.Builder
    }
    public func getBuilder() -> Myproto.CreateRoomTos.Builder {
      return classBuilder() as! Myproto.CreateRoomTos.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.CreateRoomTos.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.CreateRoomTos.Builder()
    }
    public func toBuilder() throws -> Myproto.CreateRoomTos.Builder {
      return try Myproto.CreateRoomTos.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.CreateRoomTos) throws -> Myproto.CreateRoomTos.Builder {
      return try Myproto.CreateRoomTos.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasRoomName {
        output += "\(indent) roomName: \(roomName) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasRoomName {
               hashCode = (hashCode &* 31) &+ roomName.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.CreateRoomTos"
    }
    override public func className() -> String {
        return "Myproto.CreateRoomTos"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.CreateRoomTos.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.CreateRoomTos = Myproto.CreateRoomTos()
      public func getMessage() -> Myproto.CreateRoomTos {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasRoomName:Bool {
           get {
                return builderResult.hasRoomName
           }
      }
      public var roomName:String {
           get {
                return builderResult.roomName
           }
           set (value) {
               builderResult.hasRoomName = true
               builderResult.roomName = value
           }
      }
      public func setRoomName(value:String) -> Myproto.CreateRoomTos.Builder {
        self.roomName = value
        return self
      }
      public func clearRoomName() -> Myproto.CreateRoomTos.Builder{
           builderResult.hasRoomName = false
           builderResult.roomName = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.CreateRoomTos.Builder {
        builderResult = Myproto.CreateRoomTos()
        return self
      }
      public override func clone() throws -> Myproto.CreateRoomTos.Builder {
        return try Myproto.CreateRoomTos.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.CreateRoomTos {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.CreateRoomTos {
        let returnMe:Myproto.CreateRoomTos = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.CreateRoomTos) throws -> Myproto.CreateRoomTos.Builder {
        if other == Myproto.CreateRoomTos() {
         return self
        }
        if other.hasRoomName {
             roomName = other.roomName
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.CreateRoomTos.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.CreateRoomTos.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            roomName = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1001>
  final public class CreateRoomToc : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var roomId:Int64 = Int64(0)

    public private(set) var hasRoomId:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasRoomId {
        try output.writeInt64(1, value:roomId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasRoomId {
        serialize_size += roomId.computeInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.CreateRoomToc> {
      var mergedArray = Array<Myproto.CreateRoomToc>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.CreateRoomToc? {
      return try Myproto.CreateRoomToc.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.CreateRoomToc {
      return try Myproto.CreateRoomToc.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.CreateRoomToc {
      return try Myproto.CreateRoomToc.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.CreateRoomToc {
      return try Myproto.CreateRoomToc.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.CreateRoomToc {
      return try Myproto.CreateRoomToc.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.CreateRoomToc {
      return try Myproto.CreateRoomToc.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.CreateRoomToc {
      return try Myproto.CreateRoomToc.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.CreateRoomToc.Builder {
      return Myproto.CreateRoomToc.classBuilder() as! Myproto.CreateRoomToc.Builder
    }
    public func getBuilder() -> Myproto.CreateRoomToc.Builder {
      return classBuilder() as! Myproto.CreateRoomToc.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.CreateRoomToc.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.CreateRoomToc.Builder()
    }
    public func toBuilder() throws -> Myproto.CreateRoomToc.Builder {
      return try Myproto.CreateRoomToc.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.CreateRoomToc) throws -> Myproto.CreateRoomToc.Builder {
      return try Myproto.CreateRoomToc.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasRoomId {
        output += "\(indent) roomId: \(roomId) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasRoomId {
               hashCode = (hashCode &* 31) &+ roomId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.CreateRoomToc"
    }
    override public func className() -> String {
        return "Myproto.CreateRoomToc"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.CreateRoomToc.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.CreateRoomToc = Myproto.CreateRoomToc()
      public func getMessage() -> Myproto.CreateRoomToc {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasRoomId:Bool {
           get {
                return builderResult.hasRoomId
           }
      }
      public var roomId:Int64 {
           get {
                return builderResult.roomId
           }
           set (value) {
               builderResult.hasRoomId = true
               builderResult.roomId = value
           }
      }
      public func setRoomId(value:Int64) -> Myproto.CreateRoomToc.Builder {
        self.roomId = value
        return self
      }
      public func clearRoomId() -> Myproto.CreateRoomToc.Builder{
           builderResult.hasRoomId = false
           builderResult.roomId = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.CreateRoomToc.Builder {
        builderResult = Myproto.CreateRoomToc()
        return self
      }
      public override func clone() throws -> Myproto.CreateRoomToc.Builder {
        return try Myproto.CreateRoomToc.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.CreateRoomToc {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.CreateRoomToc {
        let returnMe:Myproto.CreateRoomToc = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.CreateRoomToc) throws -> Myproto.CreateRoomToc.Builder {
        if other == Myproto.CreateRoomToc() {
         return self
        }
        if other.hasRoomId {
             roomId = other.roomId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.CreateRoomToc.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.CreateRoomToc.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            roomId = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1002>
  final public class JoinRoomTos : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var errCode:Int64 = Int64(0)

    public private(set) var hasErrCode:Bool = false
    public private(set) var roomId:Int64 = Int64(0)

    public private(set) var hasRoomId:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasErrCode {
        try output.writeInt64(1, value:errCode)
      }
      if hasRoomId {
        try output.writeInt64(2, value:roomId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasErrCode {
        serialize_size += errCode.computeInt64Size(1)
      }
      if hasRoomId {
        serialize_size += roomId.computeInt64Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.JoinRoomTos> {
      var mergedArray = Array<Myproto.JoinRoomTos>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.JoinRoomTos? {
      return try Myproto.JoinRoomTos.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.JoinRoomTos {
      return try Myproto.JoinRoomTos.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.JoinRoomTos {
      return try Myproto.JoinRoomTos.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.JoinRoomTos {
      return try Myproto.JoinRoomTos.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.JoinRoomTos {
      return try Myproto.JoinRoomTos.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.JoinRoomTos {
      return try Myproto.JoinRoomTos.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.JoinRoomTos {
      return try Myproto.JoinRoomTos.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.JoinRoomTos.Builder {
      return Myproto.JoinRoomTos.classBuilder() as! Myproto.JoinRoomTos.Builder
    }
    public func getBuilder() -> Myproto.JoinRoomTos.Builder {
      return classBuilder() as! Myproto.JoinRoomTos.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.JoinRoomTos.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.JoinRoomTos.Builder()
    }
    public func toBuilder() throws -> Myproto.JoinRoomTos.Builder {
      return try Myproto.JoinRoomTos.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.JoinRoomTos) throws -> Myproto.JoinRoomTos.Builder {
      return try Myproto.JoinRoomTos.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasErrCode {
        output += "\(indent) errCode: \(errCode) \n"
      }
      if hasRoomId {
        output += "\(indent) roomId: \(roomId) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasErrCode {
               hashCode = (hashCode &* 31) &+ errCode.hashValue
            }
            if hasRoomId {
               hashCode = (hashCode &* 31) &+ roomId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.JoinRoomTos"
    }
    override public func className() -> String {
        return "Myproto.JoinRoomTos"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.JoinRoomTos.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.JoinRoomTos = Myproto.JoinRoomTos()
      public func getMessage() -> Myproto.JoinRoomTos {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasErrCode:Bool {
           get {
                return builderResult.hasErrCode
           }
      }
      public var errCode:Int64 {
           get {
                return builderResult.errCode
           }
           set (value) {
               builderResult.hasErrCode = true
               builderResult.errCode = value
           }
      }
      public func setErrCode(value:Int64) -> Myproto.JoinRoomTos.Builder {
        self.errCode = value
        return self
      }
      public func clearErrCode() -> Myproto.JoinRoomTos.Builder{
           builderResult.hasErrCode = false
           builderResult.errCode = Int64(0)
           return self
      }
      public var hasRoomId:Bool {
           get {
                return builderResult.hasRoomId
           }
      }
      public var roomId:Int64 {
           get {
                return builderResult.roomId
           }
           set (value) {
               builderResult.hasRoomId = true
               builderResult.roomId = value
           }
      }
      public func setRoomId(value:Int64) -> Myproto.JoinRoomTos.Builder {
        self.roomId = value
        return self
      }
      public func clearRoomId() -> Myproto.JoinRoomTos.Builder{
           builderResult.hasRoomId = false
           builderResult.roomId = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.JoinRoomTos.Builder {
        builderResult = Myproto.JoinRoomTos()
        return self
      }
      public override func clone() throws -> Myproto.JoinRoomTos.Builder {
        return try Myproto.JoinRoomTos.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.JoinRoomTos {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.JoinRoomTos {
        let returnMe:Myproto.JoinRoomTos = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.JoinRoomTos) throws -> Myproto.JoinRoomTos.Builder {
        if other == Myproto.JoinRoomTos() {
         return self
        }
        if other.hasErrCode {
             errCode = other.errCode
        }
        if other.hasRoomId {
             roomId = other.roomId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.JoinRoomTos.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.JoinRoomTos.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            errCode = try input.readInt64()

          case 16 :
            roomId = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1003>
  final public class JoinRoomToc : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var errCode:Int64 = Int64(0)

    public private(set) var hasErrCode:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasErrCode {
        try output.writeInt64(1, value:errCode)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasErrCode {
        serialize_size += errCode.computeInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.JoinRoomToc> {
      var mergedArray = Array<Myproto.JoinRoomToc>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.JoinRoomToc? {
      return try Myproto.JoinRoomToc.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.JoinRoomToc {
      return try Myproto.JoinRoomToc.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.JoinRoomToc {
      return try Myproto.JoinRoomToc.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.JoinRoomToc {
      return try Myproto.JoinRoomToc.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.JoinRoomToc {
      return try Myproto.JoinRoomToc.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.JoinRoomToc {
      return try Myproto.JoinRoomToc.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.JoinRoomToc {
      return try Myproto.JoinRoomToc.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.JoinRoomToc.Builder {
      return Myproto.JoinRoomToc.classBuilder() as! Myproto.JoinRoomToc.Builder
    }
    public func getBuilder() -> Myproto.JoinRoomToc.Builder {
      return classBuilder() as! Myproto.JoinRoomToc.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.JoinRoomToc.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.JoinRoomToc.Builder()
    }
    public func toBuilder() throws -> Myproto.JoinRoomToc.Builder {
      return try Myproto.JoinRoomToc.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.JoinRoomToc) throws -> Myproto.JoinRoomToc.Builder {
      return try Myproto.JoinRoomToc.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasErrCode {
        output += "\(indent) errCode: \(errCode) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasErrCode {
               hashCode = (hashCode &* 31) &+ errCode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.JoinRoomToc"
    }
    override public func className() -> String {
        return "Myproto.JoinRoomToc"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.JoinRoomToc.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.JoinRoomToc = Myproto.JoinRoomToc()
      public func getMessage() -> Myproto.JoinRoomToc {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasErrCode:Bool {
           get {
                return builderResult.hasErrCode
           }
      }
      public var errCode:Int64 {
           get {
                return builderResult.errCode
           }
           set (value) {
               builderResult.hasErrCode = true
               builderResult.errCode = value
           }
      }
      public func setErrCode(value:Int64) -> Myproto.JoinRoomToc.Builder {
        self.errCode = value
        return self
      }
      public func clearErrCode() -> Myproto.JoinRoomToc.Builder{
           builderResult.hasErrCode = false
           builderResult.errCode = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.JoinRoomToc.Builder {
        builderResult = Myproto.JoinRoomToc()
        return self
      }
      public override func clone() throws -> Myproto.JoinRoomToc.Builder {
        return try Myproto.JoinRoomToc.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.JoinRoomToc {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.JoinRoomToc {
        let returnMe:Myproto.JoinRoomToc = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.JoinRoomToc) throws -> Myproto.JoinRoomToc.Builder {
        if other == Myproto.JoinRoomToc() {
         return self
        }
        if other.hasErrCode {
             errCode = other.errCode
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.JoinRoomToc.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.JoinRoomToc.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            errCode = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1004>
  final public class LeaveRoomTos : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.LeaveRoomTos> {
      var mergedArray = Array<Myproto.LeaveRoomTos>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.LeaveRoomTos? {
      return try Myproto.LeaveRoomTos.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.LeaveRoomTos {
      return try Myproto.LeaveRoomTos.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.LeaveRoomTos {
      return try Myproto.LeaveRoomTos.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.LeaveRoomTos {
      return try Myproto.LeaveRoomTos.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LeaveRoomTos {
      return try Myproto.LeaveRoomTos.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.LeaveRoomTos {
      return try Myproto.LeaveRoomTos.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LeaveRoomTos {
      return try Myproto.LeaveRoomTos.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.LeaveRoomTos.Builder {
      return Myproto.LeaveRoomTos.classBuilder() as! Myproto.LeaveRoomTos.Builder
    }
    public func getBuilder() -> Myproto.LeaveRoomTos.Builder {
      return classBuilder() as! Myproto.LeaveRoomTos.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.LeaveRoomTos.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.LeaveRoomTos.Builder()
    }
    public func toBuilder() throws -> Myproto.LeaveRoomTos.Builder {
      return try Myproto.LeaveRoomTos.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.LeaveRoomTos) throws -> Myproto.LeaveRoomTos.Builder {
      return try Myproto.LeaveRoomTos.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.LeaveRoomTos"
    }
    override public func className() -> String {
        return "Myproto.LeaveRoomTos"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.LeaveRoomTos.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.LeaveRoomTos = Myproto.LeaveRoomTos()
      public func getMessage() -> Myproto.LeaveRoomTos {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.LeaveRoomTos.Builder {
        builderResult = Myproto.LeaveRoomTos()
        return self
      }
      public override func clone() throws -> Myproto.LeaveRoomTos.Builder {
        return try Myproto.LeaveRoomTos.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.LeaveRoomTos {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.LeaveRoomTos {
        let returnMe:Myproto.LeaveRoomTos = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.LeaveRoomTos) throws -> Myproto.LeaveRoomTos.Builder {
        if other == Myproto.LeaveRoomTos() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.LeaveRoomTos.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LeaveRoomTos.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1005>
  final public class LeaveRoomToc : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var errCode:Int64 = Int64(0)

    public private(set) var hasErrCode:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasErrCode {
        try output.writeInt64(1, value:errCode)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasErrCode {
        serialize_size += errCode.computeInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.LeaveRoomToc> {
      var mergedArray = Array<Myproto.LeaveRoomToc>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.LeaveRoomToc? {
      return try Myproto.LeaveRoomToc.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.LeaveRoomToc {
      return try Myproto.LeaveRoomToc.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.LeaveRoomToc {
      return try Myproto.LeaveRoomToc.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.LeaveRoomToc {
      return try Myproto.LeaveRoomToc.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LeaveRoomToc {
      return try Myproto.LeaveRoomToc.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.LeaveRoomToc {
      return try Myproto.LeaveRoomToc.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LeaveRoomToc {
      return try Myproto.LeaveRoomToc.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.LeaveRoomToc.Builder {
      return Myproto.LeaveRoomToc.classBuilder() as! Myproto.LeaveRoomToc.Builder
    }
    public func getBuilder() -> Myproto.LeaveRoomToc.Builder {
      return classBuilder() as! Myproto.LeaveRoomToc.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.LeaveRoomToc.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.LeaveRoomToc.Builder()
    }
    public func toBuilder() throws -> Myproto.LeaveRoomToc.Builder {
      return try Myproto.LeaveRoomToc.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.LeaveRoomToc) throws -> Myproto.LeaveRoomToc.Builder {
      return try Myproto.LeaveRoomToc.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasErrCode {
        output += "\(indent) errCode: \(errCode) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasErrCode {
               hashCode = (hashCode &* 31) &+ errCode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.LeaveRoomToc"
    }
    override public func className() -> String {
        return "Myproto.LeaveRoomToc"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.LeaveRoomToc.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.LeaveRoomToc = Myproto.LeaveRoomToc()
      public func getMessage() -> Myproto.LeaveRoomToc {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasErrCode:Bool {
           get {
                return builderResult.hasErrCode
           }
      }
      public var errCode:Int64 {
           get {
                return builderResult.errCode
           }
           set (value) {
               builderResult.hasErrCode = true
               builderResult.errCode = value
           }
      }
      public func setErrCode(value:Int64) -> Myproto.LeaveRoomToc.Builder {
        self.errCode = value
        return self
      }
      public func clearErrCode() -> Myproto.LeaveRoomToc.Builder{
           builderResult.hasErrCode = false
           builderResult.errCode = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.LeaveRoomToc.Builder {
        builderResult = Myproto.LeaveRoomToc()
        return self
      }
      public override func clone() throws -> Myproto.LeaveRoomToc.Builder {
        return try Myproto.LeaveRoomToc.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.LeaveRoomToc {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.LeaveRoomToc {
        let returnMe:Myproto.LeaveRoomToc = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.LeaveRoomToc) throws -> Myproto.LeaveRoomToc.Builder {
        if other == Myproto.LeaveRoomToc() {
         return self
        }
        if other.hasErrCode {
             errCode = other.errCode
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.LeaveRoomToc.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LeaveRoomToc.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            errCode = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1006>
  final public class LiveTos : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var types:Int64 = Int64(0)

    public private(set) var hasTypes:Bool = false
    public private(set) var data:NSData = NSData()

    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasTypes {
        try output.writeInt64(1, value:types)
      }
      if hasData {
        try output.writeData(2, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTypes {
        serialize_size += types.computeInt64Size(1)
      }
      if hasData {
        serialize_size += data.computeDataSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.LiveTos> {
      var mergedArray = Array<Myproto.LiveTos>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.LiveTos? {
      return try Myproto.LiveTos.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.LiveTos {
      return try Myproto.LiveTos.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.LiveTos {
      return try Myproto.LiveTos.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.LiveTos {
      return try Myproto.LiveTos.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LiveTos {
      return try Myproto.LiveTos.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.LiveTos {
      return try Myproto.LiveTos.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LiveTos {
      return try Myproto.LiveTos.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.LiveTos.Builder {
      return Myproto.LiveTos.classBuilder() as! Myproto.LiveTos.Builder
    }
    public func getBuilder() -> Myproto.LiveTos.Builder {
      return classBuilder() as! Myproto.LiveTos.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.LiveTos.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.LiveTos.Builder()
    }
    public func toBuilder() throws -> Myproto.LiveTos.Builder {
      return try Myproto.LiveTos.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.LiveTos) throws -> Myproto.LiveTos.Builder {
      return try Myproto.LiveTos.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasTypes {
        output += "\(indent) types: \(types) \n"
      }
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTypes {
               hashCode = (hashCode &* 31) &+ types.hashValue
            }
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.LiveTos"
    }
    override public func className() -> String {
        return "Myproto.LiveTos"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.LiveTos.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.LiveTos = Myproto.LiveTos()
      public func getMessage() -> Myproto.LiveTos {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasTypes:Bool {
           get {
                return builderResult.hasTypes
           }
      }
      public var types:Int64 {
           get {
                return builderResult.types
           }
           set (value) {
               builderResult.hasTypes = true
               builderResult.types = value
           }
      }
      public func setTypes(value:Int64) -> Myproto.LiveTos.Builder {
        self.types = value
        return self
      }
      public func clearTypes() -> Myproto.LiveTos.Builder{
           builderResult.hasTypes = false
           builderResult.types = Int64(0)
           return self
      }
      public var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      public var data:NSData {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      public func setData(value:NSData) -> Myproto.LiveTos.Builder {
        self.data = value
        return self
      }
      public func clearData() -> Myproto.LiveTos.Builder{
           builderResult.hasData = false
           builderResult.data = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.LiveTos.Builder {
        builderResult = Myproto.LiveTos()
        return self
      }
      public override func clone() throws -> Myproto.LiveTos.Builder {
        return try Myproto.LiveTos.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.LiveTos {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.LiveTos {
        let returnMe:Myproto.LiveTos = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.LiveTos) throws -> Myproto.LiveTos.Builder {
        if other == Myproto.LiveTos() {
         return self
        }
        if other.hasTypes {
             types = other.types
        }
        if other.hasData {
             data = other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.LiveTos.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LiveTos.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            types = try input.readInt64()

          case 18 :
            data = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1007>
  final public class LiveToc : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var errCode:Int64 = Int64(0)

    public private(set) var hasErrCode:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasErrCode {
        try output.writeInt64(1, value:errCode)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasErrCode {
        serialize_size += errCode.computeInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.LiveToc> {
      var mergedArray = Array<Myproto.LiveToc>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.LiveToc? {
      return try Myproto.LiveToc.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.LiveToc {
      return try Myproto.LiveToc.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.LiveToc {
      return try Myproto.LiveToc.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.LiveToc {
      return try Myproto.LiveToc.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LiveToc {
      return try Myproto.LiveToc.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.LiveToc {
      return try Myproto.LiveToc.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LiveToc {
      return try Myproto.LiveToc.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.LiveToc.Builder {
      return Myproto.LiveToc.classBuilder() as! Myproto.LiveToc.Builder
    }
    public func getBuilder() -> Myproto.LiveToc.Builder {
      return classBuilder() as! Myproto.LiveToc.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.LiveToc.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.LiveToc.Builder()
    }
    public func toBuilder() throws -> Myproto.LiveToc.Builder {
      return try Myproto.LiveToc.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.LiveToc) throws -> Myproto.LiveToc.Builder {
      return try Myproto.LiveToc.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasErrCode {
        output += "\(indent) errCode: \(errCode) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasErrCode {
               hashCode = (hashCode &* 31) &+ errCode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.LiveToc"
    }
    override public func className() -> String {
        return "Myproto.LiveToc"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.LiveToc.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.LiveToc = Myproto.LiveToc()
      public func getMessage() -> Myproto.LiveToc {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasErrCode:Bool {
           get {
                return builderResult.hasErrCode
           }
      }
      public var errCode:Int64 {
           get {
                return builderResult.errCode
           }
           set (value) {
               builderResult.hasErrCode = true
               builderResult.errCode = value
           }
      }
      public func setErrCode(value:Int64) -> Myproto.LiveToc.Builder {
        self.errCode = value
        return self
      }
      public func clearErrCode() -> Myproto.LiveToc.Builder{
           builderResult.hasErrCode = false
           builderResult.errCode = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.LiveToc.Builder {
        builderResult = Myproto.LiveToc()
        return self
      }
      public override func clone() throws -> Myproto.LiveToc.Builder {
        return try Myproto.LiveToc.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.LiveToc {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.LiveToc {
        let returnMe:Myproto.LiveToc = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.LiveToc) throws -> Myproto.LiveToc.Builder {
        if other == Myproto.LiveToc() {
         return self
        }
        if other.hasErrCode {
             errCode = other.errCode
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.LiveToc.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.LiveToc.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            errCode = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1008>
  final public class GetRoomsTos : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var id:Int64 = Int64(0)

    public private(set) var hasId:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeInt64(1, value:id)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.GetRoomsTos> {
      var mergedArray = Array<Myproto.GetRoomsTos>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.GetRoomsTos? {
      return try Myproto.GetRoomsTos.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.GetRoomsTos {
      return try Myproto.GetRoomsTos.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.GetRoomsTos {
      return try Myproto.GetRoomsTos.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.GetRoomsTos {
      return try Myproto.GetRoomsTos.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.GetRoomsTos {
      return try Myproto.GetRoomsTos.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.GetRoomsTos {
      return try Myproto.GetRoomsTos.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.GetRoomsTos {
      return try Myproto.GetRoomsTos.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.GetRoomsTos.Builder {
      return Myproto.GetRoomsTos.classBuilder() as! Myproto.GetRoomsTos.Builder
    }
    public func getBuilder() -> Myproto.GetRoomsTos.Builder {
      return classBuilder() as! Myproto.GetRoomsTos.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.GetRoomsTos.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.GetRoomsTos.Builder()
    }
    public func toBuilder() throws -> Myproto.GetRoomsTos.Builder {
      return try Myproto.GetRoomsTos.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.GetRoomsTos) throws -> Myproto.GetRoomsTos.Builder {
      return try Myproto.GetRoomsTos.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.GetRoomsTos"
    }
    override public func className() -> String {
        return "Myproto.GetRoomsTos"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.GetRoomsTos.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.GetRoomsTos = Myproto.GetRoomsTos()
      public func getMessage() -> Myproto.GetRoomsTos {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:Int64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:Int64) -> Myproto.GetRoomsTos.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Myproto.GetRoomsTos.Builder{
           builderResult.hasId = false
           builderResult.id = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.GetRoomsTos.Builder {
        builderResult = Myproto.GetRoomsTos()
        return self
      }
      public override func clone() throws -> Myproto.GetRoomsTos.Builder {
        return try Myproto.GetRoomsTos.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.GetRoomsTos {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.GetRoomsTos {
        let returnMe:Myproto.GetRoomsTos = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.GetRoomsTos) throws -> Myproto.GetRoomsTos.Builder {
        if other == Myproto.GetRoomsTos() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.GetRoomsTos.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.GetRoomsTos.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            id = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Room : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var roomId:Int64 = Int64(0)

    public private(set) var hasRoomId:Bool = false
    public private(set) var roomName:String = ""

    public private(set) var hasRoomName:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasRoomId {
        try output.writeInt64(1, value:roomId)
      }
      if hasRoomName {
        try output.writeString(2, value:roomName)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasRoomId {
        serialize_size += roomId.computeInt64Size(1)
      }
      if hasRoomName {
        serialize_size += roomName.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.Room> {
      var mergedArray = Array<Myproto.Room>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.Room? {
      return try Myproto.Room.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.Room {
      return try Myproto.Room.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.Room {
      return try Myproto.Room.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.Room {
      return try Myproto.Room.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.Room {
      return try Myproto.Room.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.Room {
      return try Myproto.Room.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.Room {
      return try Myproto.Room.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.Room.Builder {
      return Myproto.Room.classBuilder() as! Myproto.Room.Builder
    }
    public func getBuilder() -> Myproto.Room.Builder {
      return classBuilder() as! Myproto.Room.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.Room.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.Room.Builder()
    }
    public func toBuilder() throws -> Myproto.Room.Builder {
      return try Myproto.Room.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.Room) throws -> Myproto.Room.Builder {
      return try Myproto.Room.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasRoomId {
        output += "\(indent) roomId: \(roomId) \n"
      }
      if hasRoomName {
        output += "\(indent) roomName: \(roomName) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasRoomId {
               hashCode = (hashCode &* 31) &+ roomId.hashValue
            }
            if hasRoomName {
               hashCode = (hashCode &* 31) &+ roomName.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.Room"
    }
    override public func className() -> String {
        return "Myproto.Room"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.Room.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.Room = Myproto.Room()
      public func getMessage() -> Myproto.Room {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasRoomId:Bool {
           get {
                return builderResult.hasRoomId
           }
      }
      public var roomId:Int64 {
           get {
                return builderResult.roomId
           }
           set (value) {
               builderResult.hasRoomId = true
               builderResult.roomId = value
           }
      }
      public func setRoomId(value:Int64) -> Myproto.Room.Builder {
        self.roomId = value
        return self
      }
      public func clearRoomId() -> Myproto.Room.Builder{
           builderResult.hasRoomId = false
           builderResult.roomId = Int64(0)
           return self
      }
      public var hasRoomName:Bool {
           get {
                return builderResult.hasRoomName
           }
      }
      public var roomName:String {
           get {
                return builderResult.roomName
           }
           set (value) {
               builderResult.hasRoomName = true
               builderResult.roomName = value
           }
      }
      public func setRoomName(value:String) -> Myproto.Room.Builder {
        self.roomName = value
        return self
      }
      public func clearRoomName() -> Myproto.Room.Builder{
           builderResult.hasRoomName = false
           builderResult.roomName = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.Room.Builder {
        builderResult = Myproto.Room()
        return self
      }
      public override func clone() throws -> Myproto.Room.Builder {
        return try Myproto.Room.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.Room {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.Room {
        let returnMe:Myproto.Room = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.Room) throws -> Myproto.Room.Builder {
        if other == Myproto.Room() {
         return self
        }
        if other.hasRoomId {
             roomId = other.roomId
        }
        if other.hasRoomName {
             roomName = other.roomName
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.Room.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.Room.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            roomId = try input.readInt64()

          case 18 :
            roomName = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  //<1009>
  final public class GetRoomToc : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var room:Array<Myproto.Room>  = Array<Myproto.Room>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementroom in room {
          try output.writeMessage(1, value:oneElementroom)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementroom in room {
          serialize_size += oneElementroom.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Myproto.GetRoomToc> {
      var mergedArray = Array<Myproto.GetRoomToc>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Myproto.GetRoomToc? {
      return try Myproto.GetRoomToc.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Myproto.GetRoomToc {
      return try Myproto.GetRoomToc.Builder().mergeFromData(data, extensionRegistry:Myproto.MyprotoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Myproto.GetRoomToc {
      return try Myproto.GetRoomToc.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Myproto.GetRoomToc {
      return try Myproto.GetRoomToc.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.GetRoomToc {
      return try Myproto.GetRoomToc.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Myproto.GetRoomToc {
      return try Myproto.GetRoomToc.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.GetRoomToc {
      return try Myproto.GetRoomToc.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Myproto.GetRoomToc.Builder {
      return Myproto.GetRoomToc.classBuilder() as! Myproto.GetRoomToc.Builder
    }
    public func getBuilder() -> Myproto.GetRoomToc.Builder {
      return classBuilder() as! Myproto.GetRoomToc.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Myproto.GetRoomToc.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Myproto.GetRoomToc.Builder()
    }
    public func toBuilder() throws -> Myproto.GetRoomToc.Builder {
      return try Myproto.GetRoomToc.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Myproto.GetRoomToc) throws -> Myproto.GetRoomToc.Builder {
      return try Myproto.GetRoomToc.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      var roomElementIndex:Int = 0
      for oneElementroom in room {
          output += "\(indent) room[\(roomElementIndex)] {\n"
          output += try oneElementroom.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          roomElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementroom in room {
                hashCode = (hashCode &* 31) &+ oneElementroom.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Myproto.GetRoomToc"
    }
    override public func className() -> String {
        return "Myproto.GetRoomToc"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Myproto.GetRoomToc.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Myproto.GetRoomToc = Myproto.GetRoomToc()
      public func getMessage() -> Myproto.GetRoomToc {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var room:Array<Myproto.Room> {
           get {
               return builderResult.room
           }
           set (value) {
               builderResult.room = value
           }
      }
      public func setRoom(value:Array<Myproto.Room>) -> Myproto.GetRoomToc.Builder {
        self.room = value
        return self
      }
      public func clearRoom() -> Myproto.GetRoomToc.Builder {
        builderResult.room.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Myproto.GetRoomToc.Builder {
        builderResult = Myproto.GetRoomToc()
        return self
      }
      public override func clone() throws -> Myproto.GetRoomToc.Builder {
        return try Myproto.GetRoomToc.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Myproto.GetRoomToc {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Myproto.GetRoomToc {
        let returnMe:Myproto.GetRoomToc = builderResult
        return returnMe
      }
      public func mergeFrom(other:Myproto.GetRoomToc) throws -> Myproto.GetRoomToc.Builder {
        if other == Myproto.GetRoomToc() {
         return self
        }
        if !other.room.isEmpty  {
           builderResult.room += other.room
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Myproto.GetRoomToc.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Myproto.GetRoomToc.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Myproto.Room.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            room += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
